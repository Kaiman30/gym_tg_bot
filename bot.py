import asyncio
from DB import database as db

from aiogram import Router, Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.enums import ParseMode


# –≤—ã–±–æ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
with open('token.txt', 'r') as file:
    TOKEN = file.read()
    
bot = Bot(token=TOKEN.strip(), parse_mode=ParseMode.HTML)
dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    #await db.cmd_db_start(message.from_user.id, message.from_user.full_name)
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç! \n<b>–Ø</b> - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n'
                         f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á—à–µ —É–∑–Ω–∞—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø–∏—à–∏ "/help"')


@dp.message(Command("help"))
async def help(message: Message) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await message.answer(f'–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n\n'
                         f'<b>/w –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –í–µ—Å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π)</b> - –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ\n'
                         f'<b>/l - –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π</b>\n'
                         f'<b>/cw –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ - –¢–µ–∫—É—â–∏–π –≤–µ—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</b>')


@dp.message(Command("w"))
async def weight(message: Message, command: CommandObject):
    """–ö–æ–º–∞–Ω–¥–∞ /w (weight)"""
    data = command.args.capitalize()
    if data:
        data = data.split()
        exercise = data[:-1] # [1, 2, 3]
        exercise = ' '.join(exercise)
        weight = data[-1]

        await db.add_weight(message.from_user.id, message.from_user.full_name, exercise, weight)
        await message.answer(f'–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: <b>{exercise}</b>\n'
                             f'–í–µ—Å: <b>{weight}</b>')
    else:
        await message.answer('‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω—ã')


@dp.message(Command("l"))
async def list_(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /l (–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)"""
    ex_list = await db.list_exes(message.from_user.id)
    if ex_list:
        output = 'üî¢<b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>\n\n' + '\n'.join(ex_list)
        await message.answer(output)
    else:
        await message.answer('‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø—É—Å—Ç')


@dp.message(Command("cw"))
async def current_weight(message: Message, command: CommandObject):
    """–ö–æ–º–∞–Ω–¥–∞ /cw (–¢–µ–∫—É—â–∏–µ –≤–µ—Å–∞)"""
    exes = command.args.capitalize()
    current_weight = await db.current_weight(message.from_user.id, exes)
    if current_weight:
        await message.answer(f'–¢–µ–∫—É—â–∏–µ –≤–µ—Å –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "{exes}": <b>{current_weight[0]}</b>')
    else:
        await message.answer('‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')


async def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await db.db_start()
    
    await bot.delete_webhook(True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
